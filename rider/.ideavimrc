
"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number 
set nonrelativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamed

" Leader Key
let mapleader="\<space>"

"Default Behavior
set gdefault

" iIdeaVim Specific Settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray


"" ========================================================
"" Plugin Settings
"" ========================================================
set exchange
set commentary
set ReplaceWithRegister
set surround
set nerdtree

" Searching Plugins
set sneak
set easymotion
let g:EasyMotion_override_acejump = 0

" Highlighting Plugins
set highlightedyank
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Object Plugins
set textobj-entire
set indent-object
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 20
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "false"


"" ========================================================
"" Key Mappings
"" ========================================================
" Tab navigation
nmap <C-p> <Action>(PreviousTab)
nmap <C-n> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Navigation actions
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)

" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Visual indentation
vnoremap < <gv
vnoremap > >gv

" IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)

" Clear Search Highlighitng
nnoremap <C-[> :noh<return>


"" ========================================================
"" Leader Commands
"" ========================================================

" EasyMotion
let g:WhichKeyDesc_easymotion = "<leader><leader> EasyMotion"


" Information commands
nmap <leader>ie <action>(ShowErrorDescription)
nmap <leader>it <action>(ExpressionTypeInfo)
nmap <leader>ip <action>(ParameterInfo)
nmap <leader>ij <action>(QuickJavaDoc)
nmap <leader>if <action>(FileStructurePopup)
nmap <leader>iU <action>(ShowUmlDiagram)
nmap <leader>ih <action>(CallHierarchy)
nmap <leader>iu <action>(ShowUsages)
nmap <leader>im <action>(MethodHierarchy)
let g:WhichKeyDesc_info = "<leader>i Information"
let g:WhichKeyDesc_info_error = "<leader>ie Error Description"
let g:WhichKeyDesc_info_type = "<leader>it Expression Type"
let g:WhichKeyDesc_info_parameter = "<leader>ip Parameter Info"
let g:WhichKeyDesc_info_javadoc = "<leader>ij Java Doc"
let g:WhichKeyDesc_info_file_structure = "<leader>if File Structure"
let g:WhichKeyDesc_info_uml_diagram = "<leader>iU UML Diagram"
let g:WhichKeyDesc_info_call_hierarchy = "<leader>ih Call Hierarchy"
let g:WhichKeyDesc_info_show_usages = "<leader>iu Usages"
let g:WhichKeyDesc_info_method_hierarchy = "<leader>im Method Hierarchy"


" Window splits
nmap <leader>wv <action>(SplitVertically)
nmap <leader>wh <action>(SplitHorizontally)
nmap <leader>wu <action>(Unsplit)
nmap <leader>wm <action>(MoveEditorToOppositeTabGroup)
nmap <leader>wb <action>(Back)
nmap <leader>wf <action>(Forward)
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"


" Tab Navigation and Management
nmap <leader>tP <Action>(PinActiveEditorTab)
nmap <leader>tg1 <Action>(GoToTab1)
nmap <leader>tg2 <Action>(GoToTab2)
nmap <leader>tg3 <Action>(GoToTab3)
nmap <leader>tg4 <Action>(GoToTab4)
nmap <leader>tg5 <Action>(GoToTab5)
nmap <leader>tg6 <Action>(GoToTab6)
nmap <leader>tg7 <Action>(GoToTab7)
nmap <leader>tg8 <Action>(GoToTab8)
nmap <leader>tg9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>to <Action>(CloseAllEditorsButActive)
nmap <leader>ta <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tP Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>tg1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>tg2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>tg3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>tg4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>tg5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>tg6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>tg7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>tg8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>tg9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>to Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>ta Close All Unpinned Tabs"



" Display options
map <leader>Dd <action>(ToggleDistractionFreeMode)
map <leader>Dz <action>(ToggleZenMode)
map <leader>Df <action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"


" File navigation
nmap <leader>fg <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fc <Action>(FindInPath)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>fe :NERDTreeToggle<CR>
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fy <Action>(CopyAbsolutePath)
nmap <leader>fp <Action>(ManageRecentProjects)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
nmap <leader>ff <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fc Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>fe Toggle NERDTree"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>fp Manage Recent Projects"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>ff Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"


" Run Actions
nmap <leader>rm <action>(RunMenu)
nmap <leader>rn <action>(RunClass)
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rr <action>(Rerun)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rf <action>(RerunFailedTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rC <action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run = "<leader>r Run"
let g:WhichKeyDesc_run_menu = "<leader>rm Run Menu"
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
let g:WhichKeyDesc_run_context = "<leader>rc Context Run"
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
let g:WhichKeyDesc_run_tests = "<leader>rt Run Tests"
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed Tests"
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
let g:WhichKeyDesc_run_choose_configuration = "<leader>rC Choose Run Configuration"


" Debugging commands
nmap <leader>dx <Action>(Debug)
nmap <leader>dc <Action>(ContextDebug)
nmap <leader>dv <Action>(ViewBreakpoints)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <leader>dt <Action>(ToggleLineBreakpoint)
nmap <leader>dC <Action>(RunToCursor)
nmap <leader>di <Action>(StepInto)
nmap <leader>do <Action>(StepOver)
nmap <leader>dr <Action>(Resume)
nmap <leader>dR <Action>(EvaluateExpression)
nmap <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
let g:WhichKeyDesc_debug_execute = "<leader>dx Execute Debug"
let g:WhichKeyDesc_debug_context = "<leader>dc Context Debug"
let g:WhichKeyDesc_debug_view_breakpoints = "<leader>dv View Breakpoints"
let g:WhichKeyDesc_debug_edit_breakpoints = "<leader>de Edit Breakpoints"
let g:WhichKeyDesc_debug_mute_breakpoints = "<leader>dm Mute Breakpoints"
let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>dt Toggle Line Breakpoint"
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>dC Run to Cursor"
let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"
let g:WhichKeyDesc_debug_step_over = "<leader>do Step Over"
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume Debugging"
let g:WhichKeyDesc_debug_evaluate_expression = "<leader>dR Evaluate Expression"
let g:WhichKeyDesc_debug_activate_tool_window = "<leader>dt Activate Debug Tool Window"


" Language Actions
nmap <leader>ll <Action>(Refactorings.QuickListPopupAction)
nmap <leader>lr <Action>(RenameElement)
nmap <leader>lc <Action>(ChangeSignature)
nmap <leader>lv <Action>(IntroduceVariable)
nmap <leader>li <Action>(Inline)
nmap <leader>lf <Action>(IntroduceField)
nmap <leader>lm <Action>(ExtractMethod)
nmap <leader>lC <Action>(IntroduceConstant)
nmap <leader>lp <Action>(IntroduceParameter)
nmap <leader>lo <Action>(IntroduceParameterObject)
nmap <leader>le <Action>(EncapsulateFields)
nmap <leader>la <Action>(ShowIntentionActions)
nmap <leader>lR <Action>(ReformatCode)
nmap <leader>lI <Action>(InspectCode)
nmap <leader>lG <Action>(Generate)
let g:WhichKeyDesc_language = "<leader>l Language"
let g:WhichKeyDesc_language_menu = "<leader>ll Quick List"
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
let g:WhichKeyDesc_language_inline_variable = "<leader>li Inline"
let g:WhichKeyDesc_language_introduce_field = "<leader>lf Introduce Field"
let g:WhichKeyDesc_language_extract_method = "<leader>lm Extract Method"
let g:WhichKeyDesc_language_introduce_constant = "<leader>lC Introduce Constant"
let g:WhichKeyDesc_language_introduce_parameter = "<leader>lp Introduce Parameter"
let g:WhichKeyDesc_language_introduce_param_object = "<leader>lo Introduce Parameter Object"
let g:WhichKeyDesc_language_encapsulate = "<leader>le Encapsulate Fields"
let g:WhichKeyDesc_language_show_intention_actions = "<leader>la Show Intention Actions"
let g:WhichKeyDesc_language_reformat_code = "<leader>lR Reformat Code"
let g:WhichKeyDesc_language_inspect_code = "<leader>lI Inspect Code"
let g:WhichKeyDesc_language_generate = "<leader>lG Generate"


""" Bookmarks
nmap <leader>bm <Action>(Bookmarks)
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"


" Go To
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>go <Action>(GotoSuperMethod)
nmap <leader>gD <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gT <Action>(GotoTest)
let g:WhichKeyDesc_goto = "<leader>g Go To"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go To Declaration"
let g:WhichKeyDesc_goto_super_method = "<leader>go Go To Super Method"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gD Go To Type Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go To Implementation"
let g:WhichKeyDesc_goto_test = "<leader>gT Go To Test"


" Search
nmap <leader>sS <action>(SearchEverywhere)
nmap <leader>su <Action>(FindUsages)
nmap <leader>sn <Action>(ShowNavBar)
nmap <leader>sa <Action>(GotoAction)
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>ss <Action>(GotoSymbol)
nmap <leader>st <Action>(TextSearchAction)
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_search_everywhere = "<leader>sS Search Everywhere"
let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"
let g:WhichKeyDesc_search_nav_bar = "<leader>sn Show Nav Bar"
let g:WhichKeyDesc_search_action = "<leader>sa Search Action"
let g:WhichKeyDesc_search_class = "<leader>sc Search Class"
let g:WhichKeyDesc_search_file = "<leader>sf Search File"
let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"
let g:WhichKeyDesc_search_text = "<leader>st Search Text"


" Case Conversion
vmap <leader>cm <Action>(me.laria.code.idea_caseconv.convert_case_menu)
vmap <leader>cc <Action>(me.laria.code.idea_caseconv.CamelCaseAction)
vmap <leader>cp <Action>(me.laria.code.idea_caseconv.PascalCaseAction)
vmap <leader>cs <Action>(me.laria.code.idea_caseconv.SnakeCaseAction)
vmap <leader>cS <Action>(me.laria.code.idea_caseconv.ScreamingSnakeCaseAction)
vmap <leader>cl <Action>(me.laria.code.idea_caseconv.LowerCaseAction)
vmap <leader>cu <Action>(me.laria.code.idea_caseconv.UpperCaseAction)
vmap <leader>c. <Action>(me.laria.code.idea_caseconv.DotCaseAction)
vmap <leader>cw <Action>(me.laria.code.idea_caseconv.SeparateWordsAction)
vmap <leader>ct <Action>(me.laria.code.idea_caseconv.TitleCaseAction)
vmap <leader>c- <Action>(me.laria.code.idea_caseconv.DashCaseAction)
vmap <leader>cd <Action>(me.laria.code.idea_caseconv.SentenceCaseAction)
let g:WhichKeyDesc_case_conversion = "<leader>c Case Conversion"
let g:WhichKeyDesc_change_case_menu = "<leader>cm Case Menu"
let g:WhichKeyDesc_case_conversion_camel = "<leader>cc camelCase"
let g:WhichKeyDesc_case_conversion_pascal = "<leader>cp PascalCase"
let g:WhichKeyDesc_case_conversion_snake = "<leader>cs snake_case"
let g:WhichKeyDesc_case_conversion_screaming_snake = "<leader>cS SCREAMING_SNAKE_CASE"
let g:WhichKeyDesc_case_conversion_lower = "<leader>cl lowercase"
let g:WhichKeyDesc_case_conversion_upper = "<leader>cu UPPERCASE"
let g:WhichKeyDesc_case_conversion_dot = "<leader>c. dot.case"
let g:WhichKeyDesc_case_conversion_words = "<leader>cw Separate Words"
let g:WhichKeyDesc_case_conversion_title = "<leader>ct Title Case"
let g:WhichKeyDesc_case_conversion_dash = "<leader>c- dash-case"
let g:WhichKeyDesc_case_conversion_sentence = "<leader>cd Sentence case"


" Git
nmap <leader>Gc <Action>(Vcs.Show.Local.Changes)
nmap <leader>Gb <Action>(Git.Branches)
nmap <leader>Gf <Action>(Git.Fetch)
nmap <leader>Gp <Action>(Vcs.Push)
nmap <leader>GP <Action>(Git.Commit.And.Push.Executor)
nmap <leader>Go <Action>(Github.View.Pull.Request)
nmap <leader>Gm <Action>(VcsGroups)
nmap <leader>Gg <Action>(CheckinProject)
nmap <leader>Ga <Action>(Annotate)
nmap <leader>Gt <Action>(ActivateVersionControlToolWindow)
nmap <leader>Gr <Action>(Vcs.RollbackChangedLines)
nmap <leader>Gu <Action>(Vcs.UpdateProject)
let g:WhichKeyDesc_git = "<leader>G Git"
let g:WhichKeyDesc_git_checkin = "<leader>Gg Checkin"
let g:WhichKeyDesc_git_branches = "<leader>Gb Branches"
let g:WhichKeyDesc_git_push = "<leader>Gp Push"
let g:WhichKeyDesc_git_commit_and_push = "<leader>GP Commit & Push"
let g:WhichKeyDesc_git_menu = "<leader>Gm Menu"
let g:WhichKeyDesc_git_fetch = "<leader>Gf Fetch"
let g:WhichKeyDesc_git_annotate = "<leader>Ga Annotate"
let g:WhichKeyDesc_git_log = "<leader>Gl Log"
let g:WhichKeyDesc_git_tool = "<leader>Gt Tool"
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>Gr Rollback"
let g:WhichKeyDesc_git_open_pull_requests = "<leader>Go Open Pull Requests"
let g:WhichKeyDesc_git_local_changes = "<leader>Gc Show Local Changes"
let g:WhichKeyDesc_git_update_project = "<leader>Gu Update Project"
" LazyVim key mappings for Jetbrains IDEs.

" LazyVim default settings
" https://www.lazyvim.org/configuration/general

let mapleader=" "
let maplocalleader="\\"

" Confirm to save changes before exiting modified buffer
set formatoptions=jcroqlnt
" Print line number
set number
" Relative line numbers
set relativenumber
" Lines of context
set scrolloff=4
" Round indent
set shiftround
" Columns of context
set sidescrolloff=8
" which-key says to set this high, or set notimeout
set timeoutlen=10000
set notimeout
set undolevels=10000
" Disable line wrap
set nowrap
" Enable copy/paste to/from system keyboard
set clipboard+=unnamedplus

" Neovim settings that differ from Vim
" https://neovim.io/doc/user/diff.html
" https://github.com/mikeslattery/nvim-defaults.vim/blob/main/plugin/.vimrc

set backspace=indent,eol,start
set formatoptions=tcqj
set listchars=tab:>\ ,trail:-,nbsp:+
set shortmess=filnxtToOF

" Enable plugin behavior

" https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins
" https://www.lazyvim.org/plugins


" ========================================
" Plugin Configurations
" ========================================

" Commentary - gcc and gc<action> mappings
Plug 'tpope/vim-commentary'

" Surround - Emulate LazyVim mini.surround mappings
Plug 'tpope/vim-surround'
let g:surround_no_mappings = 1
let g:WhichKeyDesc_surround = "gs surround"
let g:WhichKeyDesc_surround_add = "gsa Add Surrounding"
nmap gsa <Plug>YSurround
xmap gsa <Plug>VSurround

let g:WhichKeyDesc_surround_delete = "gsd Delete Surrounding"
nmap gsd <Plug>DSurround

let g:WhichKeyDesc_surround_replace = "gsr Replace Surrounding"
nmap gsr <Plug>CSurround


" EasyMotion - Use s to jump anywhere (similar to flash.nvim in LazyVim)
set easymotion
let g:EasyMotion_do_mapping = 0
let g:WhichKeyDesc_easymotion = "s Flash"
nmap s <Plug>(easymotion-s)
xmap s <Plug>(easymotion-s)
omap s <Plug>(easymotion-s)


" Which-Key plugin
set which-key

" Which-Key group descriptions
let g:WhichKeyDesc_leader_c = "<leader>c code"
let g:WhichKeyDesc_leader_d = "<leader>d debug" 
let g:WhichKeyDesc_leader_f = "<leader>f file/find"
let g:WhichKeyDesc_leader_g = "<leader>g git"
let g:WhichKeyDesc_leader_q = "<leader>q quit"
let g:WhichKeyDesc_leader_s = "<leader>s search"
let g:WhichKeyDesc_leader_t = "<leader>t test"
let g:WhichKeyDesc_leader_u = "<leader>u ui"
let g:WhichKeyDesc_leader_w = "<leader>w window"
let g:WhichKeyDesc_leader_x = "<leader>x diagnostics/quickfix"
let g:WhichKeyDesc_leader_tab = "<leader><tab> tabs"

" Additional plugins
set matchit  " Extended matching - A Neovim default plugin
set textobj-indent  " Indent text objects (ai, ii, aI, iI)
set textobj-entire  " Entire file text objects (ag, ig)

" Remap ai to behave like aI to match LazyVim behavior
" (LazyVim's vai includes closing lines)
let g:WhichKeyDesc_textobj_indent = "ai indent"
xmap ai <Plug>textobj-indent-aI
omap ai <Plug>textobj-indent-aI

" Entire file text objects - Remap to LazyVim conventions
let g:WhichKeyDesc_textobj_a_entire = "ag entire file"
xmap ag <Plug>textobj-entire-a
omap ag <Plug>textobj-entire-a

let g:WhichKeyDesc_textobj_i_entire = "ig entire file"
xmap ig <Plug>textobj-entire-i
omap ig <Plug>textobj-entire-i


" ========================================
" Key Mappings
" ========================================

" Variables for custom keymaps based on the current IDE flavor (:echo &ide).
" https://github.com/JetBrains/ideavim/discussions/375
let is_ide_rider = &ide == 'JetBrains Rider'

" https://www.lazyvim.org/configuration/keymaps

" To track Action-IDs
" :action VimFindActionIdAction


" ========================================
" General Keymaps
" ========================================

let g:WhichKeyDesc_window_left = "<C-h> Go to Left Window"
nmap <C-h> <C-w>h

let g:WhichKeyDesc_window_down = "<C-j> Go to Lower Window"
nmap <C-j> <C-w>j

let g:WhichKeyDesc_window_up = "<C-k> Go to Upper Window"
nmap <C-k> <C-w>k

let g:WhichKeyDesc_window_right = "<C-l> Go to Right Window"
nmap <C-l> <C-w>l

let g:WhichKeyDesc_window_height_inc = "<C-Up> Increase Window Height"
nmap <C-Up> <Action>(IncrementWindowHeight)

let g:WhichKeyDesc_window_height_dec = "<C-Down> Decrease Window Height"
nmap <C-Down> <Action>(DecrementWindowHeight)

let g:WhichKeyDesc_window_width_dec = "<C-Left> Decrease Window Width"
nmap <C-Left> <Action>(DecrementWindowWidth)

let g:WhichKeyDesc_window_width_inc = "<C-Right> Increase Window Width"
nmap <C-Right> <Action>(IncrementWindowWidth)

let g:WhichKeyDesc_move_down = "<A-j> Move Down"
nmap <A-j> <Action>(MoveLineDown)
vmap <A-j> <Action>(MoveLineDown)
imap <A-j> <Esc><Action>(MoveLineDown)i

let g:WhichKeyDesc_move_up = "<A-k> Move Up"
nmap <A-k> <Action>(MoveLineUp)
vmap <A-k> <Action>(MoveLineUp)
imap <A-k> <Esc><Action>(MoveLineUp)i

let g:WhichKeyDesc_buffer_prev = "<S-h> Prev Buffer"
nmap <S-h> <Action>(PreviousTab)

let g:WhichKeyDesc_buffer_next = "<S-l> Next Buffer"
nmap <S-l> <Action>(NextTab)

let g:WhichKeyDesc_buffer_prev_alt = "[b Prev Buffer"
nmap [b <Action>(PreviousTab)

let g:WhichKeyDesc_buffer_next_alt = "]b Next Buffer"
nmap ]b <Action>(NextTab)

let g:WhichKeyDesc_buffer_switch = "<leader>bb Switch to Other Buffer"
nnoremap <leader>bb <C-^>

let g:WhichKeyDesc_buffer_switch_alt = "<leader>` Switch to Other Buffer"
nnoremap <leader>` <C-^>

let g:WhichKeyDesc_buffer_delete = "<leader>bd Delete Buffer"
nmap <leader>bd <Action>(CloseContent)

let g:WhichKeyDesc_buffer_delete_window = "<leader>bD Delete Buffer and Window"
nmap <leader>bD <Action>(CloseContent)

let g:WhichKeyDesc_buffer_delete_others = "<leader>bo Delete Other Buffers"
nmap <leader>bo <Action>(CloseAllEditorsButActive)

let g:WhichKeyDesc_escape_clear = "<esc> Escape and Clear hlsearch"
nmap <esc> :nohlsearch<CR>

let g:WhichKeyDesc_redraw_clear = "<leader>ur Redraw / Clear hlsearch / Diff Update"
nmap <leader>ur :nohlsearch<CR>

let g:WhichKeyDesc_keywordprg = "<leader>K Keywordprg"
nmap <leader>K :help<space><C-r><C-w><CR>

let g:WhichKeyDesc_comment_below = "gco Add Comment Below"
nmap gco o<c-o>gcc

let g:WhichKeyDesc_comment_above = "gcO Add Comment Above"
nmap gcO O<c-o>gcc

let g:WhichKeyDesc_lazy = "<leader>l Lazy"
nmap <leader>l <Action>(WelcomeScreen.Plugins)

let g:WhichKeyDesc_file_new = "<leader>fn New File"
nmap <leader>fn <Action>(NewElementSamePlace)

let g:WhichKeyDesc_location_list = "<leader>xl Location List"
nmap <leader>xl <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_quickfix_list = "<leader>xq Quickfix List"
nmap <leader>xq <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_quickfix_prev = "[q Previous Quickfix"
nmap [q <Action>(GotoPreviousError)

let g:WhichKeyDesc_quickfix_next = "]q Next Quickfix"
nmap ]q <Action>(GotoNextError)

let g:WhichKeyDesc_format = "<leader>cf Format"
nmap <leader>cf <Action>(Format)
vmap <leader>cf <Action>(Format)

let g:WhichKeyDesc_diagnostics_line = "<leader>cd Line Diagnostics"
nmap <leader>cd <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_diagnostic_next = "]d Next Diagnostic"
nmap ]d <Action>(GotoNextError)

let g:WhichKeyDesc_diagnostic_prev = "[d Prev Diagnostic"
nmap [d <Action>(GotoPreviousError)

let g:WhichKeyDesc_error_next = "]e Next Error"
nmap ]e <Action>(GotoNextError)

let g:WhichKeyDesc_error_prev = "[e Prev Error"
nmap [e <Action>(GotoPreviousError)

let g:WhichKeyDesc_warning_next = "]w Next Warning"
nmap ]w <Action>(GotoNextError)

let g:WhichKeyDesc_warning_prev = "[w Prev Warning"
nmap [w <Action>(GotoPreviousError)

let g:WhichKeyDesc_ui_auto_format_global = "<leader>uf Toggle Auto Format (Global)"
nmap <leader>ub :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>

let g:WhichKeyDesc_ui_auto_format_buffer = "<leader>uF Toggle Auto Format (Buffer)"
nmap <leader>uB :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>

let g:WhichKeyDesc_ui_spelling = "<leader>us Toggle Spelling"
nmap <leader>us :setlocal spell!<CR>

let g:WhichKeyDesc_ui_wrap = "<leader>uw Toggle Wrap"
nmap <leader>uw :setlocal wrap!<CR>

let g:WhichKeyDesc_ui_relative_number = "<leader>uL Toggle Relative Number"
nmap <leader>uL :set relativenumber!<CR>

let g:WhichKeyDesc_ui_diagnostics = "<leader>ud Toggle Diagnostics"
nmap <leader>ud <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_ui_line_numbers = "<leader>ul Toggle Line Numbers"
nmap <leader>ul :set number!<CR>

let g:WhichKeyDesc_ui_conceal = "<leader>uc Toggle Conceal Level"
nmap <leader>uc :echo 'There is no equivalent mapping for Toggle Conceallevel.'<cr>

let g:WhichKeyDesc_ui_treesitter = "<leader>uT Toggle Treesitter Highlight"
nmap <leader>uT :echo 'There is no equivalent mapping for Toggle Treesitter Highlight.'<cr>

let g:WhichKeyDesc_ui_background = "<leader>ub Toggle Dark Background"
nmap <leader>ub <Action>(QuickChangeScheme)

let g:WhichKeyDesc_ui_inlay_hints = "<leader>uh Toggle Inlay Hints"
nmap <leader>uh <Action>(ToggleInlayHintsGloballyAction)

let g:WhichKeyDesc_git_ui = "<leader>gg GitUi (Root Dir)"
nmap <leader>gg <Action>(ActivateCommitToolWindow)

let g:WhichKeyDesc_git_ui_cwd = "<leader>gG GitUi (cwd)"
nmap <leader>gG <Action>(ActivateCommitToolWindow)

let g:WhichKeyDesc_git_blame = "<leader>gb Git Blame Line"
nmap <leader>gb <Action>(Annotate)

let g:WhichKeyDesc_git_browse = "<leader>gB Git Browse (open)"
nmap <leader>gB <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_git_file_history = "<leader>gf Git File History"
nmap <leader>gf <Action>(Vcs.ShowTabbedFileHistory)

let g:WhichKeyDesc_git_log = "<leader>gl Git Log"
nmap <leader>gl <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_git_log_cwd = "<leader>gL Git Log (cwd)"
nmap <leader>gL <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_quit_all = "<leader>qq Quit All"
nmap <leader>qq <Action>(Exit)

let g:WhichKeyDesc_inspect_pos = "<leader>ui Inspect Pos"
nmap <leader>ui <Action>(ActivateStructureToolWindow)

let g:WhichKeyDesc_inspect_tree = "<leader>uI Inspect Tree"
nmap <leader>uI <Action>(ActivateStructureToolWindow)

let g:WhichKeyDesc_changelog = "<leader>L LazyVim Changelog"
nmap <leader>L <Action>(WhatsNewAction)

let g:WhichKeyDesc_terminal = "<leader>ft Terminal (Root Dir)"
nmap <leader>ft <Action>(ActivateTerminalToolWindow)

let g:WhichKeyDesc_terminal_cwd = "<leader>fT Terminal (cwd)"
nmap <leader>fT <Action>(ActivateTerminalToolWindow)

let g:WhichKeyDesc_terminal_ctrl = "<C-/> Terminal (Root Dir)"
nmap <C-/> <Action>(ActivateTerminalToolWindow)

" nmap <C-_> 'There is no equivalent mapping for <c-_>.'<cr>
" Hide Terminal - terminal mode maps not possible
let g:WhichKeyDesc_split_below = "<leader>- Split Window Below"
nmap <leader>- <c-w>s

let g:WhichKeyDesc_split_right = "<leader>| Split Window Right"
nmap <leader><bar> <c-w>v

let g:WhichKeyDesc_window_delete = "<leader>wd Delete Window"
nmap <leader>wd <Action>(CloseContent)

let g:WhichKeyDesc_window_maximize = "<leader>wm Toggle Zoom Mode"
nmap <leader>wm <Action>(ToggleDistractionFreeMode)


" ========================================
" Tab Management (Saved Layouts)
" ========================================

let g:WhichKeyDesc_tab_last = "<leader><tab>l Last Tab"
nmap <leader><tab>l <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

let g:WhichKeyDesc_tab_close_others = "<leader><tab>o Close Other Tabs"
nmap <leader><tab>o :<cr>

let g:WhichKeyDesc_tab_first = "<leader><tab>f First Tab"
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

let g:WhichKeyDesc_tab_new = "<leader><tab><tab> New Tab"
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(StoreNewLayout)

let g:WhichKeyDesc_tab_next = "<leader><tab>] Next Tab"
nmap <leader><tab>] <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

let g:WhichKeyDesc_tab_previous = "<leader><tab>[ Previous Tab"
nmap <leader><tab>[ <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

let g:WhichKeyDesc_tab_close = "<leader><tab>d Close Tab"
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)


" ========================================
" LSP Keymaps
" ========================================

let g:WhichKeyDesc_code_lsp_info = "<leader>cl Lsp Info"
nmap <leader>cc :echo 'There is no equivalent mapping for Lsp Info.'<cr>

let g:WhichKeyDesc_goto_definition = "gd Goto Definition"
nmap gd <Action>(GotoDeclaration)

" Code Navigation
let g:WhichKeyDesc_references = "gr References"
nmap gr <Action>(FindUsages)

let g:WhichKeyDesc_goto_implementation = "gI Goto Implementation"
nmap gI <Action>(GotoImplementation)

let g:WhichKeyDesc_goto_type = "gy Goto T[y]pe Definition"
nmap gy <Action>(GotoTypeDeclaration)

let g:WhichKeyDesc_goto_declaration = "gD Goto Declaration"
nmap gD <Action>(GotoDeclaration)

let g:WhichKeyDesc_signature_help = "gK Signature Help"
nmap gK <Action>(ParameterInfo)

let g:WhichKeyDesc_signature_help_alt = "<C-k> Signature Help"
imap <C-k> <C-o><Action>(ParameterInfo)

let g:WhichKeyDesc_code_action = "<leader>ca Code Action"
nmap <leader>ca <Action>(RefactoringMenu)
vmap <leader>ca <Action>(RefactoringMenu)

let g:WhichKeyDesc_code_lens = "<leader>cc Run Codelens"
nmap <leader>cc :echo 'There is no equivalent mapping for Run Codelens.'<cr>

let g:WhichKeyDesc_code_lens_refresh = "<leader>cC Refresh & Display Codelens"
nmap <leader>cC :echo 'There is no equivalent mapping for Refresh & Display Codelens.'<cr>

let g:WhichKeyDesc_rename_file = "<leader>cR Rename File"
nmap <leader>cR <Action>(RenameFile)
if is_ide_rider | nmap <leader>cR <Action>(RiderRenameFile) | endif

let g:WhichKeyDesc_rename = "<leader>cr Rename"
nmap <leader>cr <Action>(RenameElement)

let g:WhichKeyDesc_source_action = "<leader>cA Source Action"
nmap <leader>cA <Action>(ShowIntentionActions)

let g:WhichKeyDesc_reference_next = "]] Next Reference"
nmap ]] <Action>(GotoNextElementUnderCaretUsage)

let g:WhichKeyDesc_reference_prev = "[[ Prev Reference"
nmap [[ <Action>(GotoPrevElementUnderCaretUsage)

let g:WhichKeyDesc_reference_next_alt = "<A-n> Next Reference"
nmap <a-n> <Action>(GotoNextElementUnderCaretUsage)

let g:WhichKeyDesc_reference_prev_alt = "<A-p> Prev Reference"
nmap <a-p> <Action>(GotoPrevElementUnderCaretUsage)


" ========================================
" Bufferline
" ========================================

let g:WhichKeyDesc_buffer_left = "<leader>bl Delete Buffers to the Left"
nmap <leader>bl <Action>(CloseAllToTheLeft)

let g:WhichKeyDesc_buffer_pin = "<leader>bp Toggle Pin"
nmap <leader>bp <Action>(PinActiveTabToggle)

let g:WhichKeyDesc_buffer_pin_delete = "<leader>bP Delete Non-Pinned Buffers"
nmap <leader>bP <Action>(CloseAllUnpinnedEditors)

let g:WhichKeyDesc_buffer_right = "<leader>br Delete Buffers to the Right"
nmap <leader>br <Action>(CloseAllToTheRight)


" ========================================
" Explorer/Tree Keymaps
" ========================================

let g:WhichKeyDesc_buffer_explorer = "<leader>be Buffer Explorer"
nmap <leader>be <Action>(ActivateProjectToolWindow)

let g:WhichKeyDesc_explorer = "<leader>e Explorer NeoTree (Root Dir)"
nmap <leader>e <Action>(FileStructurePopup)

let g:WhichKeyDesc_explorer_cwd = "<leader>E Explorer NeoTree (cwd)"
nmap <leader>E <Action>(SelectInProjectView)

let g:WhichKeyDesc_explorer_alt = "<leader>fe Explorer NeoTree (Root Dir)"
nmap <leader>fe <Action>(ActivateProjectToolWindow)

let g:WhichKeyDesc_explorer_cwd_alt = "<leader>fE Explorer NeoTree (cwd)"
nmap <leader>fE <Action>(ActivateProjectToolWindow)

let g:WhichKeyDesc_git_explorer = "<leader>ge Git Explorer"
nmap <leader>ge <Action>(ActivateVersionControlToolWindow)


" ========================================
" Notifications
" ========================================

let g:WhichKeyDesc_search_dismiss = "<leader>snd Dismiss All"
nmap <leader>snd <Action>(ClearAllNotifications)

let g:WhichKeyDesc_ui_notifications = "<leader>un Dismiss All Notifications"
nmap <leader>un <Action>(ClearAllNotifications)


" ========================================
" Search/Find Keymaps (Telescope-like)
" ========================================

let g:WhichKeyDesc_find_files = "<leader><space> Find Files (Root Dir)"
nmap <leader><space> <Action>(GotoFile)

let g:WhichKeyDesc_buffers = "<leader>, Buffers"
nmap <leader>, <Action>(Switcher)

let g:WhichKeyDesc_grep = "<leader>/ Grep (Root Dir)"
nmap <leader>/ <Action>(FindInPath)

let g:WhichKeyDesc_command_history = "<leader>: Command History"
nmap <leader>: :history<cr>

let g:WhichKeyDesc_find_buffers = "<leader>fb Buffers"
nmap <leader>fb <Action>(Switcher)

let g:WhichKeyDesc_find_config = "<leader>fc Find Config File"
nmap <leader>fc <Action>(GotoFile)

let g:WhichKeyDesc_find_files_alt = "<leader>ff Find Files (Root Dir)"
nmap <leader>ff <Action>(GotoFile)

let g:WhichKeyDesc_find_files_cwd = "<leader>fF Find Files (cwd)"
nmap <leader>fF <Action>(GotoFile)

let g:WhichKeyDesc_find_git_files = "<leader>fg Find Files (git-files)"
nmap <leader>fg <Action>(GotoFile)

let g:WhichKeyDesc_find_recent = "<leader>fr Recent"
nmap <leader>fr <Action>(RecentFiles)

let g:WhichKeyDesc_find_recent_cwd = "<leader>fR Recent (cwd)"
nmap <leader>fR <Action>(RecentFiles)

let g:WhichKeyDesc_git_commits = "<leader>gc Git Log"
nmap <leader>gc <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_git_status = "<leader>gs Git Status"
nmap <leader>gs <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_search_registers = "<leader>s\" Registers"
nmap <leader>s" :registers<cr>

let g:WhichKeyDesc_search_autocmds = "<leader>sa Autocmds"
nmap <leader>sa :echo 'There is no equivalent mapping.'<cr>

let g:WhichKeyDesc_search_buffer = "<leader>sb Buffer Lines"
nmap <leader>sb <Action>(Switcher)

let g:WhichKeyDesc_search_command_history = "<leader>sc Command History"
nmap <leader>sc :history<cr>

let g:WhichKeyDesc_search_commands = "<leader>sC Commands"
nmap <leader>sC <Action>(GotoAction)

let g:WhichKeyDesc_search_diagnostics = "<leader>sd Diagnostics"
nmap <leader>sd <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_search_diagnostics_workspace = "<leader>sD Workspace Diagnostics"
nmap <leader>sD <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_search_grep = "<leader>sg Grep (Root Dir)"
nmap <leader>sg <Action>(FindInPath)

let g:WhichKeyDesc_search_grep_cwd = "<leader>sG Grep (cwd)"
nmap <leader>sG <Action>(FindInPath)

let g:WhichKeyDesc_search_help = "<leader>sh Help Pages"
nmap <leader>sh <Action>(HelpTopics)

let g:WhichKeyDesc_search_highlights = "<leader>sH Highlights"
nmap <leader>sH <Action>(HighlightUsagesInFile)

let g:WhichKeyDesc_search_jumps = "<leader>sj Jumps"
nmap <leader>sj <Action>(RecentLocations)

let g:WhichKeyDesc_search_keymaps = "<leader>sk Keymaps"
nmap <leader>sk :map<cr>

let g:WhichKeyDesc_search_location_list = "<leader>sl Location List"
nmap <leader>sl <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_search_marks = "<leader>sm Marks"
nmap <leader>sm :marks<cr>

let g:WhichKeyDesc_search_man = "<leader>sM Man Pages"
nmap <leader>sM <Action>(ShowDocumentation)

let g:WhichKeyDesc_search_options = "<leader>so Options"
nmap <leader>so <Action>(ShowSettings)

let g:WhichKeyDesc_search_quickfix = "<leader>sq Quickfix List"
nmap <leader>sq <Action>(ActivateProblemsViewToolWindow)

let g:WhichKeyDesc_search_resume = "<leader>sR Resume"
nmap <leader>sR :echo 'Not yet implmented.'<cr>

let g:WhichKeyDesc_search_symbol = "<leader>ss Goto Symbol"
nmap <leader>ss <Action>(GotoSymbol)

let g:WhichKeyDesc_search_symbol_workspace = "<leader>sS Goto Symbol (Workspace)"
nmap <leader>sS <Action>(GotoSymbol)

let g:WhichKeyDesc_search_word = "<leader>sw Visual selection or word (Root Dir)"
nmap <leader>sw mzviw<Action>(FindInPath)<esc>`z
vmap <leader>sw <Action>(FindInPath)

let g:WhichKeyDesc_search_word_cwd = "<leader>sW Visual selection or word (cwd)"
nmap <leader>sW mzviw<Action>(FindInPath)<esc>`z
vmap <leader>sW <Action>(FindInPath)

let g:WhichKeyDesc_ui_colorscheme = "<leader>uC Colorschemes"
nmap <leader>uC <Action>(QuickChangeScheme)


" ========================================
" Debug (DAP) Keymaps
" ========================================

let g:WhichKeyDesc_debug_args = "<leader>da Run with Args"
nmap <leader>da <Action>(ChooseRunConfiguration)

let g:WhichKeyDesc_debug_breakpoint = "<leader>db Toggle Breakpoint"
nmap <leader>db <Action>(ToggleLineBreakpoint)

let g:WhichKeyDesc_debug_breakpoint_condition = "<leader>dB Breakpoint Condition"
nmap <leader>dB <Action>(AddConditionalBreakpoint)

let g:WhichKeyDesc_debug_continue = "<leader>dc Run/Continue"
nmap <leader>dc <Action>(Resume)

let g:WhichKeyDesc_debug_cursor = "<leader>dC Run to Cursor"
nmap <leader>dC <Action>(ForceRunToCursor)

let g:WhichKeyDesc_debug_goto_line = "<leader>dg Go to Line (No Execute)"
nmap <leader>dg :echo 'Not yet implemented.'<cr>

let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"
nmap <leader>di <Action>(StepInto)

let g:WhichKeyDesc_debug_down = "<leader>dj Down"
nmap <leader>dj <Action>(GotoNextError)

let g:WhichKeyDesc_debug_up = "<leader>dk Up"
nmap <leader>dk <Action>(GotoPreviousError)

let g:WhichKeyDesc_debug_last = "<leader>dl Run Last"
nmap <leader>dl <Action>(Debug)

let g:WhichKeyDesc_debug_step_out = "<leader>do Step Out"
nmap <leader>do <Action>(StepOut)

let g:WhichKeyDesc_debug_step_over = "<leader>dO Step Over"
nmap <leader>dO <Action>(StepOver)

let g:WhichKeyDesc_debug_pause = "<leader>dP Pause"
nmap <leader>dp <Action>(Pause)

let g:WhichKeyDesc_debug_repl = "<leader>dr Toggle REPL"
nmap <leader>dr <Action>(JShell.Console)

let g:WhichKeyDesc_debug_session = "<leader>ds Session"
nmap <leader>ds :echo 'Not yet implmented.'<cr>

let g:WhichKeyDesc_debug_terminate = "<leader>dt Terminate"
nmap <leader>dt <Action>(Stop)

let g:WhichKeyDesc_debug_widgets = "<leader>dw Widgets"
nmap <leader>dw :echo 'There is no equivalent mapping for Widgets.'<cr>


" ========================================
" Todo Comments Keymaps
" ========================================

let g:WhichKeyDesc_search_todo = "<leader>st Todo"
nmap <leader>st <Action>(ActivateTODOToolWindow)

let g:WhichKeyDesc_search_todo_fixme = "<leader>sT Todo/Fix/Fixme"
nmap <leader>sT <Action>(ActivateTODOToolWindow)

let g:WhichKeyDesc_quickfix_todo = "<leader>xt Todo (Trouble)"
nmap <leader>xt <Action>(ActivateTODOToolWindow)

let g:WhichKeyDesc_quickfix_todo_fixme = "<leader>xT Todo/Fix/Fixme (Trouble)"
nmap <leader>xT <Action>(ActivateTODOToolWindow)

let g:WhichKeyDesc_todo_prev = "[t Previous Todo Comment"
nmap [t ?\(TODO\|FIX\|HACK\|WARN\|PERF\|NOTE\|TEST\):<cr>

let g:WhichKeyDesc_todo_next = "]t Next Todo Comment"
nmap ]t /\(TODO\|FIX\|HACK\|WARN\|PERF\|NOTE\|TEST\):<cr>


" ========================================
" Debug UI Keymaps
" ========================================

let g:WhichKeyDesc_debug_eval = "<leader>de Eval"
nmap <leader>de <Action>(EvaluateExpression)
vmap <leader>de <Action>(EvaluateExpression)

let g:WhichKeyDesc_debug_ui = "<leader>du Dap UI"
nmap <leader>du <Action>(ActivateDebugToolWindow)


" ========================================
" Test Keymaps
" ========================================

let g:WhichKeyDesc_test_last = "<leader>tl Run Last (Neotest)"
nmap <leader>tl <Action>(Run)
if is_ide_rider | nmap <leader>tl <Action>(RiderUnitTestRunCurrentSessionAction) | endif

let g:WhichKeyDesc_test_output = "<leader>to Show Output (Neotest)"
nmap <leader>to <Action>(ActivateRunToolWindow)
if is_ide_rider | nmap <leader>to <Action>(ActivateUnitTestsToolWindow) | endif

let g:WhichKeyDesc_test_output_panel = "<leader>tO Toggle Output Panel (Neotest)"
nmap <leader>tO <Action>(ActivateRunToolWindow)
if is_ide_rider | nmap <leader>tO <Action>(ActivateUnitTestsToolWindow) | endif

let g:WhichKeyDesc_test_nearest = "<leader>tr Run Nearest (Neotest)"
nmap <leader>tr <Action>(RunClass)
if is_ide_rider | nmap <leader>tr <Action>(RiderUnitTestRunContextAction) | endif

let g:WhichKeyDesc_test_summary = "<leader>ts Toggle Summary (Neotest)"
nmap <leader>ts :echo 'Not yet implmented.'<cr>

let g:WhichKeyDesc_test_stop = "<leader>tS Stop (Neotest)"
nmap <leader>tS <Action>(Stop)

let g:WhichKeyDesc_test_file = "<leader>tt Run File (Neotest)"
nmap <leader>tt <Action>(RunClass)
if is_ide_rider | nmap <leader>tt <Action>(RiderUnitTestRunContextAction) | endif

let g:WhichKeyDesc_test_all = "<leader>tT Run All Test Files (Neotest)"
nmap <leader>tT :echo 'Not yet implmented.'<cr>
if is_ide_rider | nmap <leader>tT <Action>(RiderUnitTestRunSolutionAction) | endif

let g:WhichKeyDesc_test_watch = "<leader>tw Toggle Watch (Neotest)"
nmap <leader>tw :echo 'Not yet implmented.'<cr>

" nvim-dap
let g:WhichKeyDesc_test_debug = "<leader>td Debug Nearest"
nmap <leader>td <Action>(ChooseDebugConfiguration)
if is_ide_rider | nmap <leader>td <Action>(RiderUnitTestDebugContextAction) | endif


" ========================================
" Buffer/Selection Keymaps
" ========================================

" Increment / Decrement Selection
sethandler <C-Space> n:vim v:vim i:ide
let g:WhichKeyDesc_selection_increment = "<C-Space> Increment Selection"
nmap <C-Space> <Action>(EditorSelectWord)
vmap <C-Space> <Action>(EditorSelectWord)

let g:WhichKeyDesc_selection_decrement = "<BS> Decrement Selection"
vmap <BS> <Action>(EditorUnSelectWord)


" ========================================
" Neovim Default Mappings
" ========================================
" https://neovim.io/doc/user/vim_diff.html#_default-mappings

nnoremap Y y$
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
" Q isn't exactly the same.
nnoremap Q @@

" Keep selection active after indenting in visual mode
vnoremap > >gv
vnoremap < <gv

" There are several more Neovim mappings that need to be ported.
